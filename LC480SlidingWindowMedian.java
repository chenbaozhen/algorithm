package algorithm;

import algorithm.myUtility.Display;

import java.util.*;

public class LC480SlidingWindowMedian {
    Queue<Integer> minHeap, maxHeap;
    Map<Integer, Integer> toDeleteCounts;
    int leftRealSize, rightRealSize;
    int k;
    public double[] medianSlidingWindow(int[] nums, int k) {
        minHeap = new PriorityQueue<>();
        maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        leftRealSize = 0;
        rightRealSize = 0;
        this.k = k;
        double[] ans = new double[nums.length - k + 1];
        if (k == 1) {
            for (int i = 0; i < nums.length; i++) {
                ans[i] = 1.0 * nums[i];
            }
            return ans;
        }
        toDeleteCounts = new HashMap<>();

        for (int i = 0; i < k; i++) {
            addToHeap(nums[i]);
            System.out.println(maxHeap + " " +minHeap);

        }

        ans[0] = getMedian();
        leftRealSize = maxHeap.size();
        rightRealSize = minHeap.size();
        for (int i = k; i < nums.length; i++) {
            addToHeap2(nums[i], nums[i - k]);
            ans[i - k + 1] = getMedian2();
            System.out.println(maxHeap + " " +minHeap);
        }
        return ans;
    }
    private void addToHeap2(int n, int d) {
        if (n <= maxHeap.peek()) {
            maxHeap.offer(n);
            leftRealSize++;
        } else {
            minHeap.offer(n);
            rightRealSize++;
        }
        toDeleteCounts.put(d, toDeleteCounts.getOrDefault(d, 0 )  + 1);

        if (d == maxHeap.peek()) {
            maxHeap.poll();
            decreaseByOne(d);
            leftRealSize--;
        } else if (d < maxHeap.peek()) {
            leftRealSize--;
        } else {
            rightRealSize--;
        }

        while (leftRealSize > 1 + rightRealSize) {
            int t = maxHeap.poll();
            int tCount = toDeleteCounts.getOrDefault(t, 0);
            if (tCount >= 1) {
                decreaseByOne(t);
            } else {
                minHeap.offer(t);
                leftRealSize--;
                rightRealSize++;
            }
        }
        while (leftRealSize < rightRealSize ) {
            int t = minHeap.poll();
            int tCount = toDeleteCounts.getOrDefault(t, 0);
            if (tCount >= 1) {
                decreaseByOne(t);
            } else {
                maxHeap.offer(t);
                leftRealSize++;
                rightRealSize--;
            }
        }
        while (true) {
            //if (maxHeap.isEmpty()) break;
            int t = maxHeap.peek();
            int tCount = toDeleteCounts.getOrDefault(t, 0);
            if (tCount == 0) break;
            decreaseByOne(t);
            maxHeap.poll();
            if (tCount == 1) {
                break;
            }
        }
        while (true) {
            if (minHeap.isEmpty()) break;
            int t = minHeap.peek();
            int tCount = toDeleteCounts.getOrDefault(t, 0);
            if (tCount == 0) break;
            decreaseByOne(t);
            minHeap.poll();
            if (tCount == 1) {
                break;
            }
        }


    }
    private void decreaseByOne(int t) {
        int tCount = toDeleteCounts.getOrDefault(t, 0);
        if (tCount == 1) {
            toDeleteCounts.remove(t);
        } else if (tCount > 1) {
            toDeleteCounts.put(t, tCount - 1);
        }
    }
    private double getMedian2() {
        if (leftRealSize == rightRealSize) {
            //System.out.println(maxHeap + " " +minHeap);
            return 0.5 * ((long) maxHeap.peek() + (long) minHeap.peek());
        }
        return 1.0 * maxHeap.peek();
    }
    private double getMedian(){
        if (maxHeap.size() == minHeap.size()) {
            return 0.5 * ((long) maxHeap.peek() + (long) minHeap.peek());
        }
        return 1.0 * maxHeap.peek();
    }

    private void addToHeap(int n) {
        if (minHeap.size() == 0 && maxHeap.size() == 0) {
            maxHeap.offer(n);
            return;
        }
        if (minHeap.size() == 0) {
            if (n >= maxHeap.peek()) {
                minHeap.offer(n);
            } else {
                minHeap.offer(maxHeap.poll());
                maxHeap.offer(n);
            }
            return;
        }

        if (n <= maxHeap.peek()) {
            if (maxHeap.size() > minHeap.size()) {
                minHeap.offer(maxHeap.poll());
            }
            maxHeap.offer(n);
        } else {
            if (minHeap.size() >= maxHeap.size()) {
                maxHeap.offer(minHeap.poll());
            }
            minHeap.offer(n);
        }
        return;
    }
    public static void main(String[] args) {
        LC480SlidingWindowMedian solution = new LC480SlidingWindowMedian();
        int[] nums = new int[]{-2147483648,-2147483648,2147483647,-2147483648,-2147483648,-2147483648,2147483647,2147483647,2147483647,2147483647,-2147483648,2147483647,-2147483648};
        int k = 2;
        Display.myPrint(solution.medianSlidingWindow(nums,2));
        double[] a = new double[] {462851407.0,462851407.0,463179852.0,463179852.0,462851407.0,462851407.0,462851407.0,462851407.0,462851407.0,463179852.0,464689331.0,464689331.0,465645203.0,465645203.0,465645203.0,471180773.0,474833169.0,474833169.0,478446501.0,478446501.0,478446501.0,474833169.0,471180773.0,478446501.0,478446501.0,471180773.0,478446501.0,478446501.0,479575244.0,479575244.0,478446501.0,471180773.0,471180773.0,465645203.0,465645203.0,464689331.0,463179852.0,464689331.0,463179852.0,463179852.0,463179852.0,462851407.0,463179852.0,462851407.0,462242385.0,462851407.0,463179852.0,463179852.0,463179852.0,463179852.0,463179852.0,463179852.0,464689331.0,463179852.0,462851407.0,462851407.0,463179852.0,464689331.0,463179852.0,463179852.0,463179852.0,463179852.0,464689331.0,465645203.0,464689331.0,464689331.0,464689331.0,463179852.0,463179852.0,464689331.0,465645203.0,471180773.0,471180773.0,465645203.0,464689331.0,464689331.0,463179852.0,463179852.0,464689331.0,463482574.0,463482574.0,463179852.0,463179852.0,463482574.0,463179852.0,463179852.0,463482574.0,463482574.0,463482574.0,464689331.0,463482574.0,463179852.0,462851407.0,462851407.0,463179852.0,463179852.0,462851407.0,462242385.0,462242385.0,462242385.0,461495731.0,461495731.0,462242385.0,461495731.0,462242385.0,462242385.0,462851407.0,462851407.0,463179852.0,463179852.0,463179852.0,463482574.0,463179852.0,463179852.0,462851407.0,462851407.0,462851407.0,462851407.0,463179852.0,462851407.0,462851407.0,463179852.0,462851407.0,462851407.0,462789551.0,462789551.0,462242385.0,462242385.0,462242385.0,462242385.0,461495731.0,459413496.0,459413496.0,459413496.0,459413496.0,459413496.0,459244054.0,459413496.0,461495731.0,462242385.0,462242385.0,462789551.0,462851407.0,463482574.0,464689331.0,465645203.0,465645203.0,465645203.0,465645203.0,464689331.0,464689331.0,463482574.0,463482574.0,463482574.0,463482574.0,463482574.0,463482574.0,464689331.0,465645203.0,471180773.0,465645203.0,464689331.0,464689331.0,463482574.0,463482574.0,464689331.0,463482574.0,463482574.0,464689331.0,465645203.0,464689331.0,465645203.0,464689331.0,464689331.0,465645203.0,465645203.0,465645203.0,465645203.0,465645203.0,464689331.0,463866116.0,463866116.0,463866116.0,463866116.0,463866116.0,463866116.0,464689331.0,464689331.0,463866116.0,463482574.0,462851407.0,462851407.0,462851407.0,462851407.0,462851407.0,462789551.0,461495731.0,462789551.0,462789551.0,461495731.0,461495731.0,459244054.0,459244054.0,459244054.0,461495731.0,459244054.0,458854788.0,459244054.0,461495731.0,462789551.0,461495731.0,461495731.0,461495731.0,459244054.0,458854788.0,458854788.0,458588260.0,456880399.0,452207730.0,450031625.0,450031625.0,442901720.0,450031625.0,450031625.0,452207730.0,452207730.0,454233502.0,454233502.0,454233502.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,454233502.0,458588260.0,454233502.0,454233502.0,458588260.0,458588260.0,458588260.0,458854788.0,459244054.0,461495731.0,462789551.0,462789551.0,461495731.0,461495731.0,461495731.0,461495731.0,459244054.0,459244054.0,459244054.0,458854788.0,458854788.0,458854788.0,458854788.0,458588260.0,458854788.0,458588260.0,452207730.0,452207730.0,450031625.0,452207730.0,458854788.0,452207730.0,452207730.0,452207730.0,452207730.0,452207730.0,452207730.0,450031625.0,442901720.0,442901720.0,442901720.0,450031625.0,450031625.0,442901720.0,442901720.0,450031625.0,442901720.0,442901720.0,450031625.0,450031625.0,450031625.0,452207730.0,452207730.0,452207730.0,452207730.0,452207730.0,458854788.0,452207730.0,452207730.0,450031625.0,450031625.0,450031625.0,450031625.0,450031625.0,452207730.0,450031625.0,450031625.0,450031625.0,452207730.0,450031625.0,452207730.0,458854788.0,458854788.0,452207730.0,452207730.0,458854788.0,462789551.0,462789551.0,458854788.0,452207730.0,452207730.0,450031625.0,450031625.0,452207730.0,452207730.0,450031625.0,450031625.0,450031625.0,450031625.0,442901720.0,442645480.0,442645480.0,440967103.0,440967103.0,439295525.0,439025357.0,439025357.0,439025357.0,436476770.0,436280767.0,436280767.0,439025357.0,436280767.0,430880846.0,436280767.0,436280767.0,436280767.0,430880846.0,430880846.0,436280767.0,439025357.0,436280767.0,436280767.0,436280767.0,439025357.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,440942217.0,440942217.0,440942217.0,440967103.0,440967103.0,440942217.0,440967103.0,440942217.0,439295525.0,436280767.0,430880846.0,429157787.0,430880846.0,430880846.0,430880846.0,430880846.0,429157787.0,429157787.0,428540556.0,429157787.0,427408396.0,421620240.0,416541976.0,421620240.0,421620240.0,421620240.0,427408396.0,427408396.0,421620240.0,415306249.0,415306249.0,412281977.0,415306249.0,415306249.0,421620240.0,421620240.0,421620240.0,415306249.0,412281977.0,412281977.0,412281977.0,404319195.0,402331728.0,404319195.0,404319195.0,402331728.0,401494901.0,401494901.0,401203083.0,401494901.0,401494901.0,402331728.0,402331728.0,401494901.0,401494901.0,402331728.0,404319195.0,402331728.0,402331728.0,404319195.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,404319195.0,404319195.0,402331728.0,402331728.0,404319195.0,412281977.0,412281977.0,412281977.0,404319195.0,412281977.0,412281977.0,421620240.0,421620240.0,421620240.0,412281977.0,421620240.0,427408396.0,429157787.0,430880846.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,434444856.0,434444856.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,430880846.0,429157787.0,427408396.0,421620240.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,421620240.0,427408396.0,430880846.0,432477444.0,432477444.0,432477444.0,430880846.0,427408396.0,427408396.0,427408396.0,430880846.0,432477444.0,434444856.0,434444856.0,434444856.0,434826720.0,434444856.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,430880846.0,432477444.0,432477444.0,432477444.0,432477444.0,434444856.0,434826720.0,434826720.0,434444856.0,432477444.0,434444856.0,434444856.0,434444856.0,434444856.0,434826720.0,436280767.0,439295525.0,439295525.0,440942217.0,440967103.0,440942217.0,440942217.0,440967103.0,440967103.0,448530832.0,448530832.0,440967103.0,440967103.0,440942217.0,440967103.0,440967103.0,448530832.0,448530832.0,440967103.0,440967103.0,440967103.0,448530832.0,448891847.0,448891847.0,462863342.0,462863342.0,448891847.0,448891847.0,462863342.0,462863342.0,463491026.0,463491026.0,464685718.0,463491026.0,462863342.0,448891847.0,448530832.0,448530832.0,448891847.0,448530832.0,448530832.0,440942217.0,439295525.0,436280767.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439236385.0,439236385.0,439236385.0,439236385.0,439295525.0,440942217.0,440942217.0,440942217.0,439295525.0,439236385.0,434826720.0,434826720.0,434444856.0,434444856.0,434444856.0,434826720.0,439236385.0,439236385.0,439295525.0,439236385.0,439295525.0,439295525.0,440942217.0,440942217.0,440942217.0,440942217.0,440942217.0,448530832.0,448530832.0,440942217.0,448530832.0,448530832.0,448530832.0,448530832.0,440942217.0,439295525.0,439295525.0,440942217.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,440942217.0,448530832.0,448891847.0,448891847.0,448530832.0,448891847.0,448891847.0,448891847.0,448891847.0,462863342.0,448891847.0,448530832.0,448530832.0,440942217.0,448530832.0,448530832.0,448891847.0,462863342.0,462863342.0,462863342.0,462863342.0,448891847.0,448891847.0,448891847.0,448891847.0,448530832.0,448530832.0,448530832.0,448891847.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,448891847.0,448891847.0,448530832.0,440942217.0,440942217.0,448530832.0,448530832.0,448530832.0,440942217.0,448530832.0,448891847.0,448530832.0,448891847.0,462863342.0,462863342.0,463491026.0,463491026.0,463491026.0,463491026.0,463491026.0,463491026.0,463491026.0,476003622.0,476562293.0,484182762.0,476562293.0,476562293.0,484182762.0,484182762.0,484182762.0,484182762.0,484182762.0,484182762.0,489470342.0,494500522.0,489470342.0,489470342.0};
        double[] b = new double[] {462851407.0,462851407.0,463179852.0,463179852.0,462851407.0,462851407.0,462851407.0,462851407.0,462851407.0,463179852.0,464689331.0,464689331.0,465645203.0,465645203.0,465645203.0,471180773.0,474833169.0,474833169.0,478446501.0,478446501.0,478446501.0,474833169.0,471180773.0,478446501.0,478446501.0,471180773.0,478446501.0,478446501.0,479575244.0,479575244.0,478446501.0,471180773.0,471180773.0,465645203.0,465645203.0,464689331.0,463179852.0,464689331.0,463179852.0,463179852.0,463179852.0,462851407.0,463179852.0,462851407.0,462242385.0,462851407.0,463179852.0,463179852.0,463179852.0,463179852.0,463179852.0,463179852.0,464689331.0,463179852.0,462851407.0,462851407.0,463179852.0,464689331.0,463179852.0,463179852.0,463179852.0,463179852.0,464689331.0,465645203.0,464689331.0,464689331.0,464689331.0,463179852.0,463179852.0,464689331.0,465645203.0,471180773.0,471180773.0,465645203.0,464689331.0,464689331.0,463179852.0,463179852.0,464689331.0,463482574.0,463482574.0,463179852.0,463179852.0,463482574.0,463179852.0,463179852.0,463482574.0,463482574.0,463482574.0,464689331.0,463482574.0,463179852.0,462851407.0,462851407.0,463179852.0,463179852.0,462851407.0,462242385.0,462242385.0,462242385.0,461495731.0,461495731.0,462242385.0,461495731.0,462242385.0,462242385.0,462851407.0,462851407.0,463179852.0,463179852.0,463179852.0,463482574.0,463179852.0,463179852.0,462851407.0,462851407.0,462851407.0,462851407.0,463179852.0,462851407.0,462851407.0,463179852.0,462851407.0,462851407.0,462789551.0,462789551.0,462242385.0,462242385.0,462242385.0,462242385.0,461495731.0,459413496.0,459413496.0,459413496.0,459413496.0,459413496.0,459244054.0,459413496.0,461495731.0,462242385.0,462242385.0,462789551.0,462851407.0,463482574.0,464689331.0,465645203.0,465645203.0,465645203.0,465645203.0,464689331.0,464689331.0,463482574.0,463482574.0,463482574.0,463482574.0,463482574.0,463482574.0,464689331.0,465645203.0,471180773.0,465645203.0,464689331.0,464689331.0,463482574.0,463482574.0,464689331.0,463482574.0,463482574.0,464689331.0,465645203.0,464689331.0,465645203.0,464689331.0,464689331.0,465645203.0,465645203.0,465645203.0,465645203.0,465645203.0,464689331.0,463866116.0,463866116.0,463866116.0,463866116.0,463866116.0,463866116.0,464689331.0,464689331.0,463866116.0,463482574.0,462851407.0,462851407.0,462851407.0,462851407.0,462851407.0,462789551.0,461495731.0,462789551.0,462789551.0,461495731.0,461495731.0,459244054.0,459244054.0,459244054.0,461495731.0,459244054.0,458854788.0,459244054.0,461495731.0,462789551.0,461495731.0,461495731.0,461495731.0,459244054.0,458854788.0,458854788.0,458588260.0,454233502.0,452207730.0,450031625.0,450031625.0,442901720.0,450031625.0,450031625.0,452207730.0,452207730.0,454233502.0,454233502.0,454233502.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,458588260.0,454233502.0,458588260.0,454233502.0,454233502.0,458588260.0,458588260.0,458588260.0,458854788.0,459244054.0,461495731.0,462789551.0,462789551.0,461495731.0,461495731.0,461495731.0,461495731.0,459244054.0,459244054.0,459244054.0,458854788.0,458854788.0,458854788.0,458854788.0,458588260.0,458854788.0,458588260.0,452207730.0,452207730.0,450031625.0,452207730.0,458854788.0,452207730.0,452207730.0,452207730.0,452207730.0,452207730.0,452207730.0,450031625.0,442901720.0,442901720.0,442901720.0,450031625.0,450031625.0,442901720.0,442901720.0,450031625.0,442901720.0,442901720.0,450031625.0,450031625.0,450031625.0,452207730.0,452207730.0,452207730.0,452207730.0,452207730.0,458854788.0,452207730.0,452207730.0,450031625.0,450031625.0,450031625.0,450031625.0,450031625.0,452207730.0,450031625.0,450031625.0,450031625.0,452207730.0,450031625.0,452207730.0,458854788.0,458854788.0,452207730.0,452207730.0,458854788.0,462789551.0,462789551.0,458854788.0,452207730.0,452207730.0,450031625.0,450031625.0,452207730.0,452207730.0,450031625.0,450031625.0,450031625.0,450031625.0,442901720.0,442645480.0,442645480.0,440967103.0,440967103.0,439295525.0,439025357.0,439025357.0,439025357.0,436280767.0,436280767.0,436280767.0,439025357.0,436280767.0,430880846.0,436280767.0,436280767.0,436280767.0,430880846.0,430880846.0,436280767.0,439025357.0,436280767.0,436280767.0,436280767.0,439025357.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,440942217.0,440942217.0,440942217.0,440967103.0,440967103.0,440942217.0,440967103.0,440942217.0,439295525.0,436280767.0,430880846.0,429157787.0,430880846.0,430880846.0,430880846.0,430880846.0,429157787.0,429157787.0,427408396.0,429157787.0,427408396.0,421620240.0,415306249.0,421620240.0,421620240.0,421620240.0,427408396.0,427408396.0,421620240.0,415306249.0,415306249.0,412281977.0,415306249.0,415306249.0,421620240.0,421620240.0,421620240.0,415306249.0,412281977.0,412281977.0,412281977.0,404319195.0,402331728.0,404319195.0,404319195.0,402331728.0,401494901.0,401494901.0,401203083.0,401494901.0,401494901.0,402331728.0,402331728.0,401494901.0,401494901.0,402331728.0,404319195.0,402331728.0,402331728.0,404319195.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,404319195.0,404319195.0,402331728.0,402331728.0,404319195.0,412281977.0,412281977.0,412281977.0,404319195.0,412281977.0,412281977.0,421620240.0,421620240.0,421620240.0,412281977.0,421620240.0,427408396.0,429157787.0,430880846.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,434444856.0,434444856.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,430880846.0,429157787.0,427408396.0,421620240.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,412281977.0,421620240.0,427408396.0,430880846.0,432477444.0,432477444.0,432477444.0,430880846.0,427408396.0,427408396.0,427408396.0,430880846.0,432477444.0,434444856.0,434444856.0,434444856.0,434826720.0,434444856.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,432477444.0,430880846.0,432477444.0,432477444.0,432477444.0,432477444.0,434444856.0,434826720.0,434826720.0,434444856.0,432477444.0,434444856.0,434444856.0,434444856.0,434444856.0,434826720.0,436280767.0,439295525.0,439295525.0,440942217.0,440967103.0,440942217.0,440942217.0,440967103.0,440967103.0,448530832.0,448530832.0,440967103.0,440967103.0,440942217.0,440967103.0,440967103.0,448530832.0,448530832.0,440967103.0,440967103.0,440967103.0,448530832.0,448891847.0,448891847.0,462863342.0,462863342.0,448891847.0,448891847.0,462863342.0,462863342.0,463491026.0,463491026.0,464685718.0,463491026.0,462863342.0,448891847.0,448530832.0,448530832.0,448891847.0,448530832.0,448530832.0,440942217.0,439295525.0,436280767.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439295525.0,439236385.0,439236385.0,439236385.0,439236385.0,439295525.0,440942217.0,440942217.0,440942217.0,439295525.0,439236385.0,434826720.0,434826720.0,434444856.0,434444856.0,434444856.0,434826720.0,439236385.0,439236385.0,439295525.0,439236385.0,439295525.0,439295525.0,440942217.0,440942217.0,440942217.0,440942217.0,440942217.0,448530832.0,448530832.0,440942217.0,448530832.0,448530832.0,448530832.0,448530832.0,440942217.0,439295525.0,439295525.0,440942217.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,440942217.0,448530832.0,448891847.0,448891847.0,448530832.0,448891847.0,448891847.0,448891847.0,448891847.0,462863342.0,448891847.0,448530832.0,448530832.0,440942217.0,448530832.0,448530832.0,448891847.0,462863342.0,462863342.0,462863342.0,462863342.0,448891847.0,448891847.0,448891847.0,448891847.0,448530832.0,448530832.0,448530832.0,448891847.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,448530832.0,448891847.0,448891847.0,448530832.0,440942217.0,440942217.0,448530832.0,448530832.0,448530832.0,440942217.0,448530832.0,448891847.0,448530832.0,448891847.0,462863342.0,462863342.0,463491026.0,463491026.0,463491026.0,463491026.0,463491026.0,463491026.0,463491026.0,476003622.0,476562293.0,484182762.0,476562293.0,476562293.0,484182762.0,484182762.0,484182762.0,484182762.0,484182762.0,484182762.0,489470342.0,494500522.0,489470342.0,489470342.0};
        for (int i = 0; i < a.length; i++) {
            if (a[i] != b[i]) {
                System.out.println(i + " :  " + a[i] + ", " + b[i]);
            }
        }
    }
}
